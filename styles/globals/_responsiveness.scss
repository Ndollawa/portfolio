@use "mixins";
@use "breakpoints";
@use "utils";
// @use 'breakpoints';

$gridCount: 12;
// $label:'sm';
.container {
  width: 100%;
  max-width: utils.pxToRem(1366);
  margin: 0 auto;
  padding: 0 utils.pxToRem(20);
}
.container-fluid {
  width: 100%;
  margin: 0 auto;
  padding: 0 utils.pxToRem(20);
}

.row {
  display: flex;
  flex-flow: row wrap;
}
@include mixins.breakPointsDown(map-get(breakpoints.$screenBreakPoints, "lg")) {
  .container {
    width: 100%;
    margin: 0 auto;
    padding: 0 utils.pxToRem(15);
  }
  .container-fluid {
    padding: 0 utils.pxToRem(15);
  }
}
@include mixins.breakPointsDown(map-get(breakpoints.$screenBreakPoints, "md")) {
  .container {
    width: 100%;
    margin: 0 auto;
    padding: 0 utils.pxToRem(10);
  }
  .container-fluid {
    padding: 0 utils.pxToRem(10);
  }
}

@each $key, $val in breakpoints.$screenBreakPoints {
  @include mixins.breakPointsUp($val) {
    @for $count from 1 through $gridCount {
      @include mixins.flexLayout($key, $count);
    }
  }
}
@each $key, $val in breakpoints.$screenBreakPoints {
  @include mixins.breakPointsUp($val) {
    @for $count from 1 through $gridCount {
      @include mixins.flexLayoutOffset($key, $count);
    }
  }
}

// GRID LAYOUT

@each $key, $val in breakpoints.$screenBreakPoints {
  @include mixins.breakPointsUp($val) {
    @each $tempType in ("columns", "rows") {
      @for $count from 1 through $gridCount {
        @include mixins.gridLayout($tempType, $key, $count);
      }
    }
  }
}

@for $count from 1 through 30 {
  @include mixins.flexLayoutGutter("gutter", $count);
}

@for $count from 1 through 30 {
  @include mixins.flexLayoutGutterX("gutter-x", $count);
}

@for $count from 1 through 30 {
  @include mixins.flexLayoutGutterY("gutter-y", $count);
}

@include mixins.generateGridRowClasses();
@include mixins.generateGridColumnClasses();
@include mixins.generateWidthClasses();
